# This is a recipe in order to create a Docker image that provides an
# environment appropriate to the *generation of the Sim-Diasca documentation*,
# notably in the context of continuous integration (ex: a GitLab one).
#
# It contains thus relevant prerequisites (including the RST toolchain), Erlang
# itself (for the edoc-based generation of the Sim-Diasca API documentation),
# and Sim-Diasca (notably as sources).
#
# This image is not specifically designed to be run interactively, but to
# integrate to a continuous integration scheme (ex: GitLab CI).


# This IMAGE_DESCRIPTION_TAG image has for Docker tag 'IMAGE_NAME_TAG', and
# its full tag will be 'FULL_IMAGE_NAME_TAG'.
#
# More complete/specialised images may be derived from it.


# The Docker context of this image is supposed to pre-exist; refer to the
# prepare-docker-image.sh script (use its --for-doc option) in charge of
# creating a suitable context and transforming this template into a final,
# standalone Dockerfile.


# Indeed this template shall be updated regarding notably the following tags in
# order to become a proper Dockerfile (the '_TAG' suffix has been removed from
# the next symbols so that they are not substituted):
#  - PARENT_IMAGE (ex: "sim-diasca:base-runtime", in its relevant version)
#  - ERLANG_VERSION (ex: "24.2")


# Parent image, from which this image will derive.
#
# Ex: 'sim-diasca/base-runtime:latest', possibly obtained from an
# organisation-specific registry distributing adapted versions:
#
FROM PARENT_IMAGE_TAG


# Defines inherited from parent image.

# As the parent image set a non-priviledged user:
USER root


# Extra packages (compared to base image) needed for documentation generation:
# (texlive-latex-base not sufficient)
#
RUN apt-get update && \
	apt-get install --yes python-docutils rubber libjs-mathjax graphviz texlive && \
	/bin/rm -rf /var/lib/apt/lists/*


# Now switches to the normal user:
USER ${SD_USER_NAME}

WORKDIR ${SD_USER_HOME}

# A bit of (overridden) documentation:
COPY README-About-This-Docker-Image.txt ${SD_USER_HOME}/README-About-This-Docker-Image.txt

# Not building Sim-Diasca documentation now either, to be done when a
# corresponding container is spawned:
#
# (yet useful for testing)
#
#RUN . ${SD_ENV_FILE} && cd ${SD_BASE}/sim-diasca/doc && make create-internal-referential DOC_TARGET_INTERNAL_DIR=${SD_USER_HOME}/public

RUN echo "Sim-Diasca Docker image for documentation generation successfully created!"
RUN echo " - user: ${SD_USER_NAME} (sudoer)"
RUN echo " - content of his home ${SD_USER_HOME}: $(/bin/ls -d ${SD_USER_HOME}/* 2>/dev/null)"
RUN echo " - content of the software base ${SOFTWARE_BASE}: $(/bin/ls -d ${SOFTWARE_BASE}/*)"
