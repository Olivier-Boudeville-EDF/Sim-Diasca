/*
 * Most simple fragment shader.
 *
 * Each fragment shader instance is to transform exactly one fragment (as
 * generated by the rasterization) into another that is based on a series of
 * colors and a single depth value.
 *
 * At least generally, this transformation should behave as a pure
 * (context-free) function.
 *
 * Refer to https://www.khronos.org/opengl/wiki/Fragment_Shader for more
 * information.
 *
 */


/*
 * The GLSL version now matches the one of OpenGL (3.3);
 * using the (default) core profile.
 *
 */
#version 330 core



/* User-defined output data, as three floating-point coordinates in [0.0, 1.0]
 * (see gui_color:render_rgb_color(); alpha of 1.0 implied) for the fragment of
 * interest; no layout specified here:
 *
 */
out vec3 my_color;


/* Just defined to test the uniform support (will not be found if not explicitly
 * used afterwards):
 *
 */
uniform vec3 some_color;


void main()
{

	// For all fragments, the output color will be pure green:
	//my_color = vec3(0.0, 1.0, 0.0);

	/* For all fragments, the output color will be set by the test application
	 * (in practice, it will bethe RGB "Myriad blue"):
	 *
	 */
	my_color = some_color;

}